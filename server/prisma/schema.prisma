generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum user_type {
  USER
  ADMIN
  SUPERADMIN
}

enum Employee_permissions {
  READ
  WRITE
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?         @db.String
  profilePicture String?
  emailVerified String?
  accounts      Account[]
  sessions      Session[]
  image         String?
  Organizations_created Organisation[] @relation("UserOrganisations")
  Employed_in   Employee[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Organisation {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  created_by_id String          @db.ObjectId
  created_by    User            @relation(fields: [created_by_id], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "UserOrganisations")
  employees     Employee[]
  tasks         Task[]
  sector        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Employee {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  user_id        String             @db.ObjectId
  user           User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organisation_id String            @db.ObjectId
  organisation   Organisation       @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status         user_type          @default(USER)
  permissions    Employee_permissions?
  joinedAt       DateTime           @default(now())
 
  CreatedTasks   Task[]             @relation("CreatedTasks")


  @@unique([user_id, organisation_id]) // Ensure a user can't have duplicate entries in the same organization
  

}

model Task {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  organisationId    String          @db.ObjectId
  organisation      Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  
  createdById       String          @db.ObjectId
  createdBy         Employee        @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "CreatedTasks")
  
  
 
  
  status            TaskStatus      @default(PENDING) // Changed to enum for clarity
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum TaskStatus {
  PENDING
  STARTED
  CANCELLED
  COMPLETED
}

